{"version":3,"sources":["AlgoVisualizer/Node/Node.jsx","Algorithms/helpers.js","Algorithms/Search/dijkstra.js","Algorithms/Search/aStar.js","Algorithms/Search/dfs.js","Algorithms/Search/bfs.js","Algorithms/Generator/recursiveDivision.js","AlgoVisualizer/AlgoVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","type","onMouseDown","distance","onMouseEnter","onMouseUp","typeClass","id","className","Component","animateAlgorithm","algoVisualizer","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","node","document","getElementById","setState","running","animateShortestPath","oldClasses","getAllNodes","grid","nodes","push","getUnvisitedNeighbors","neighbors","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","currentNode","unshift","previousNode","sortNodesByDistance","sort","nodeA","nodeB","clearPath","callback","Infinity","createNode","randomInteger","min","max","Math","floor","random","resetGrid","startNodeCoords","finishNodeCoords","getInitialGrid","currentRow","startRow","startCol","finishRow","finishCol","updateUnvisitedNeighbors","unvisitedNeighbors","visualizeDijkstra","startNode","visitedNodes","unvisitedNodes","closestNode","shift","computeDijkstra","visualizeAStar","computeAStar","manhattanDistance","abs","visualizeDFS","computeDFS","unvisitedNeighbor","newVisitedNodes","visualizeBFS","queue","path","includes","computeBFS","visualizeRecursiveDivision","generatedWallsInOrder","computeRecursiveDivision","chamber","slice","wallLineRow","entranceIdx","newTopChamber","newBottomChamber","currentRowTopChamber","currentRowBottomChamber","wallLineCol","newLeftChamber","newRightChamber","currentRowLeftChamber","currentRowRightChamber","delay","animateGeneration","setWalls","walls","newNode","AlgoVisualizer","mouseIsPressed","newGrid","getWallUpdatedGrid","emptyNodes","newRow","startNodeRow","finishNodeRow","disabled","onClick","randomizeStartFinishNodes","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9801260a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            type,\r\n            distance,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp\r\n        } = this.props;\r\n\r\n        const typeClass = type === \"finishNode\"\r\n            ? 'node-finish'\r\n            : type === \"startNode\"\r\n            ? 'node-start'\r\n            : type === \"wallNode\"\r\n            ? 'node-wall'\r\n            : '';\r\n\r\n        return (\r\n            <div \r\n                id={`node-${row}-${col}`}\r\n                className = {`node ${typeClass}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}><div className='node-center'></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","export function animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    const delay = 10;\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n        if (i === visitedNodesInOrder.length) {\r\n            // Animate the shortest path\r\n            setTimeout(() => {\r\n                animateShortestPath(algoVisualizer, nodesInShortestPathOrder);\r\n            }, delay * i);\r\n            return;\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            var oldClasses = document.getElementById(`node-${node.row}-${node.col}`).className\r\n            // Animate the current node\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-current';\r\n            // Animate the visted nodes\r\n            setTimeout(()=>{\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-visited';\r\n            }, delay);\r\n        }, delay * i);\r\n    }\r\n}\r\n\r\nfunction animateShortestPath(algoVisualizer, nodesInShortestPathOrder) {\r\n    const delay = 25;\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = \r\n            document.getElementById(`node-${node.row}-${node.col}`).className + ' node-shortest-path';\r\n        }, delay * i);\r\n    }\r\n    setTimeout(()=>{algoVisualizer.setState({running: false});}, delay * nodesInShortestPathOrder.length);\r\n}\r\n\r\nexport function animateGeneration(algoVisualizer, generatedWallsInOrder, callback=null) {\r\n    const { grid } = algoVisualizer.state;\r\n    const delay = 10;\r\n    for (let i = 0; i < generatedWallsInOrder.length; i++) {\r\n        setTimeout(() => {\r\n            const node = generatedWallsInOrder[i];\r\n            var oldClasses = document.getElementById(`node-${node.row}-${node.col}`).className\r\n            // Animate the current node\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-current';\r\n            // Animate the visted nodes\r\n            setTimeout(()=>{\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-wall';\r\n            }, delay);\r\n        }, delay * i);\r\n    }\r\n    setTimeout(()=>{\r\n        algoVisualizer.setState({running: false});\r\n        if(callback) callback(algoVisualizer, grid, generatedWallsInOrder);\r\n    }, delay * generatedWallsInOrder.length);\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n\r\n    if(row > 0) neighbors.push(grid[row-1][col]);\r\n    if(row + 1 < grid.length) neighbors.push(grid[row + 1][col]);\r\n    if(col > 0) neighbors.push(grid[row][col-1]);\r\n    if(col + 1 < grid[0].length) neighbors.push(grid[row][col + 1]);\r\n\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    var currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\nexport function sortNodesByDistance(nodes) {\r\n    nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function clearPath(algoVisualizer, callback=null) {\r\n    var {grid} = algoVisualizer.state;\r\n    \r\n    for(const row of grid) {\r\n        for(var node of row){\r\n            // update node values\r\n            var distance = node.type === \"startNode\" ? 0 : Infinity; \r\n            grid[node.row][node.col] = createNode(node.row, node.col, node.type, distance);\r\n            // update css class\r\n            if(node.type === \"default\"){\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n            }\r\n        }\r\n    }\r\n    algoVisualizer.setState({ grid }, callback);\r\n}\r\n\r\nexport function createNode(row, col, type, distance) {\r\n    return {\r\n        row,\r\n        col,\r\n        type,\r\n        distance,\r\n        isVisited: false,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nexport function randomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function randomEvenInteger(min, max) {\r\n    var temp =(Math.floor(Math.random() * (Math.floor(max/2) - min + 1)) + min) * 2;\r\n    return temp;\r\n}\r\n\r\nexport function randomOddInteger(min, max) {\r\n    var temp = (Math.floor(Math.random() * (Math.floor(max/2) - min + 1)) + min) * 2 + 1;\r\n    return temp;\r\n}\r\n\r\nexport function resetGrid(algoVisualizer, callback) {\r\n    var {grid, startNodeCoords, finishNodeCoords} = algoVisualizer.state;\r\n\r\n    // reset node classnames\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n        }\r\n    }\r\n\r\n    // set start and finish node classnames\r\n    document.getElementById(`node-${startNodeCoords[0]}-${startNodeCoords[1]}`).className = 'node node-start';\r\n    document.getElementById(`node-${finishNodeCoords[0]}-${finishNodeCoords[1]}`).className = 'node node-finish';\r\n    grid = getInitialGrid(algoVisualizer);\r\n    algoVisualizer.setState({ grid }, callback);\r\n}\r\n\r\nexport function getInitialGrid(algoVisualizer){\r\n    // Generate the empty grid\r\n    const grid = [];\r\n    const nodesPerRow = 20;\r\n    const nodesPerCol = 50;\r\n    for (let row = 0; row < nodesPerRow; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < nodesPerCol; col++) {\r\n            currentRow.push(createNode(row, col, \"default\", Infinity));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    // Set the start and finish nodes\r\n    const [startRow, startCol] = algoVisualizer.state.startNodeCoords;\r\n    const [finishRow, finishCol] = algoVisualizer.state.finishNodeCoords;\r\n    grid[startRow][startCol] = createNode(startRow, startCol, \"startNode\", 0);\r\n    grid[finishRow][finishCol] = createNode(finishRow, finishCol, \"finishNode\", Infinity);\r\n    return grid;\r\n};\r\n\r\nexport function getEuclideanDistance(x1, y1, x2, y2){\r\n    var a = x1 - x2;\r\n    var b = y1 - y2;\r\n    return Math.sqrt( a*a + b*b );\r\n}","import { animateAlgorithm, sortNodesByDistance, getAllNodes, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nexport function computeDijkstra(grid, startNodeCoords, finishNodeCoords) {\r\n  const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n  const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n  startNode.distance = 0;\r\n  var visitedNodes = [];\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(unvisitedNodes.length){\r\n      // Sort the nodes by distance\r\n      sortNodesByDistance(unvisitedNodes);\r\n      // Get the closest unvisited node\r\n      var closestNode = unvisitedNodes.shift();\r\n      // unvisitedNodes.unshift();\r\n      // Skip if the closest node is a wall\r\n      if(closestNode.type === \"wallNode\") continue;\r\n      // Return if there are no possible routes\r\n      if (closestNode.distance === Infinity) return visitedNodes;\r\n      closestNode.isVisited = true;\r\n      visitedNodes.push(closestNode);\r\n\r\n      // Check if the current node is the finish node\r\n      if(closestNode === finishNode) return visitedNodes;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function visualizeDijkstra(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n  algoVisualizer.setState({running: true});\r\n  clearPath(algoVisualizer);\r\n  const visitedNodesInOrder = computeDijkstra(grid, startNodeCoords, finishNodeCoords);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n  animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\n","import { animateAlgorithm, sortNodesByDistance, getAllNodes, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nexport function computeAStar(grid, startNodeCoords, finishNodeCoords) {\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    startNode.distance = 0;\r\n    var visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while(unvisitedNodes.length){\r\n        // Sort the nodes by distance\r\n        sortNodesByDistance(unvisitedNodes);\r\n        // Get the closest unvisited node\r\n        var closestNode = unvisitedNodes.shift();\r\n        // unvisitedNodes.unshift();\r\n        // Skip if the closest node is a wall\r\n        if(closestNode.type === \"wallNode\") continue;\r\n        // Return if there are no possible routes\r\n        if (closestNode.distance === Infinity) return visitedNodes;\r\n        closestNode.isVisited = true;\r\n        visitedNodes.push(closestNode);\r\n\r\n        // Check if the current node is the finish node\r\n        if(closestNode === finishNode) return visitedNodes;\r\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n    }\r\n}\r\n\r\nexport function visualizeAStar(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const visitedNodesInOrder = computeAStar(grid, startNodeCoords, finishNodeCoords);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        // Manhattan distance heuristic\r\n        var manhattanDistance = Math.abs(neighbor.row - finishNode.row) + Math.abs(neighbor.col - finishNode.col);\r\n        neighbor.distance = manhattanDistance;\r\n        neighbor.previousNode = node;\r\n    }\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nfunction computeDFS(grid, currentNode, finishNode, visitedNodes) {\r\n    visitedNodes.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode === finishNode) return [visitedNodes, visitedNodes];\r\n    for(let unvisitedNeighbor of getUnvisitedNeighbors(currentNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")) {\r\n        if(!unvisitedNeighbor.isVisited){\r\n            unvisitedNeighbor.previousNode = currentNode;\r\n            var newVisitedNodes = computeDFS(grid, unvisitedNeighbor, finishNode, visitedNodes)[0];\r\n            if(newVisitedNodes) return [newVisitedNodes, newVisitedNodes];\r\n        }\r\n    }\r\n    return [null, visitedNodes];\r\n}\r\n\r\nexport function visualizeDFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeDFS(grid, startNode, finishNode, [])[1];\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    if(visitedNodesInOrder) animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder); else algoVisualizer.setState({running: false});\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nfunction computeBFS(grid, startNode, finishNode) {\r\n    var queue = [startNode];\r\n    var path = [startNode];\r\n    startNode.isVisited = true;\r\n\r\n    if(startNode === finishNode) return path;\r\n\r\n    while(queue){\r\n        startNode = queue.shift();\r\n\r\n        if(startNode){\r\n            for(var neighbor of getUnvisitedNeighbors(startNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")){\r\n                if(!path.includes(neighbor)){\r\n                    neighbor.previousNode = startNode;\r\n                    neighbor.isVisited = true;\r\n                    path.push(neighbor);\r\n                    queue.push(neighbor);\r\n    \r\n                    if(neighbor === finishNode) return path;\r\n                }\r\n            }\r\n        } else {\r\n            return path;\r\n        }\r\n\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function visualizeBFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeBFS(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}","import {resetGrid, randomInteger, animateGeneration} from '../helpers';\r\n\r\nexport function computeRecursiveDivision(chamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder){\r\n    \r\n    const min_chamber_size = 2;\r\n\r\n    // If minimum chamber size is reached, return the generated walls\r\n    if(chamber.length <= min_chamber_size && chamber[0].length <= min_chamber_size ){\r\n        return generatedWallsInOrder;\r\n    }\r\n\r\n    // Create the outer walls\r\n    if(generatedWallsInOrder.length === 0) {\r\n        for(var row = 0; row < chamber.length; row++){\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(row === 0 || col === 0 || row === chamber.length - 1 || col === chamber[0].length - 1 ){\r\n                    generatedWallsInOrder.push(chamber[row][col]);\r\n                }\r\n            }\r\n        }\r\n        chamber = chamber.slice(1, chamber.length - 1);\r\n        for(var row = 0; row < chamber.length; row++){\r\n            chamber[row] = chamber[row].slice(1, chamber[row].length - 1);\r\n        }\r\n    }\r\n\r\n    // Divide chamber horizonally if the chamber is more tall than wide\r\n    if(chamber.length > chamber[0].length){\r\n        // Select a random row within the chamber to draw walls. \r\n        // Leave a one row space to prevent a double wall\r\n        var wallLineRow = randomInteger(1, chamber.length - 2);\r\n        // Leave leave a space at one random location along the wall line\r\n        var entranceIdx = randomInteger(0, 1) === 0 ? 0 : chamber[0].length - 1;\r\n        // Add walls along that row\r\n        for(var col = 0; col < chamber[wallLineRow].length; col++){\r\n            if(col !== entranceIdx && chamber[wallLineRow][col] && chamber[wallLineRow][col].type !== \"startNode\" && chamber[wallLineRow][col].type !== \"finishNode\") generatedWallsInOrder.push(chamber[wallLineRow][col]);\r\n        }\r\n\r\n        // Recursively repeat on subchambers until minimum size of chamber is reached\r\n        // Get the two new chambers\r\n        var newTopChamber = [];\r\n        var newBottomChamber = [];\r\n        for(var row = 0; row < chamber.length; row++){\r\n            const currentRowTopChamber = [];\r\n            const currentRowBottomChamber = [];\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(row < wallLineRow) currentRowTopChamber.push(chamber[row][col]);\r\n                if(row > wallLineRow) currentRowBottomChamber.push(chamber[row][col]); \r\n            }\r\n            if(currentRowTopChamber.length !== 0) newTopChamber.push(currentRowTopChamber);\r\n            if(currentRowBottomChamber.length !== 0) newBottomChamber.push(currentRowBottomChamber);\r\n            \r\n        }\r\n\r\n        generatedWallsInOrder = computeRecursiveDivision(newTopChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n        generatedWallsInOrder = computeRecursiveDivision(newBottomChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n\r\n    } else {\r\n        // Select a random col within the chamber to draw walls. \r\n        // Leave a one col space to prevent a double wall\r\n        var wallLineCol = randomInteger(1, chamber[0].length - 2);\r\n        // Leave leave a space at one random location along the wall line\r\n        var entranceIdx = randomInteger(0, 1) === 0 ? 0 : chamber.length - 1;\r\n        // Add walls along that col\r\n        for(var row = 0; row < chamber.length; row++){\r\n            if(row !== entranceIdx && chamber[row][wallLineCol] && chamber[row][wallLineCol].type !== \"startNode\" && chamber[row][wallLineCol].type !== \"finishNode\") generatedWallsInOrder.push(chamber[row][wallLineCol]);\r\n        }\r\n\r\n        // Recursively repeat on subchambers until minimum size of chamber is reached\r\n        // Get the two new chambers\r\n        var newLeftChamber = [];\r\n        var newRightChamber = [];\r\n        for(var row = 0; row < chamber.length; row++){\r\n            const currentRowLeftChamber = [];\r\n            const currentRowRightChamber = [];\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(col < wallLineCol) currentRowLeftChamber.push(chamber[row][col]);\r\n                if(col > wallLineCol) currentRowRightChamber.push(chamber[row][col]);\r\n            }\r\n            newLeftChamber.push(currentRowLeftChamber);\r\n            newRightChamber.push(currentRowRightChamber);\r\n        }\r\n\r\n        generatedWallsInOrder = computeRecursiveDivision(newLeftChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n        generatedWallsInOrder = computeRecursiveDivision(newRightChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n    }\r\n\r\n    return generatedWallsInOrder;\r\n}\r\n\r\nexport function visualizeRecursiveDivision(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    resetGrid(algoVisualizer, ()=>{\r\n        // Get the generated walls in order\r\n        const generatedWallsInOrder = computeRecursiveDivision(grid, startNodeCoords, finishNodeCoords, []);\r\n        animateGeneration(algoVisualizer, generatedWallsInOrder, setWalls);\r\n    });\r\n}\r\n\r\nfunction setWalls(algoVisualizer, grid, walls){\r\n    for(var node of walls){\r\n        const newNode = {\r\n            ...node,\r\n            type: \"wallNode\"\r\n            };\r\n        grid[node.row][node.col] = newNode;\r\n    }\r\n    algoVisualizer.setState({ grid });\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport {visualizeDijkstra} from '../Algorithms/Search/dijkstra';\r\nimport {visualizeAStar} from '../Algorithms/Search/aStar';\r\nimport {visualizeDFS} from '../Algorithms/Search/dfs';\r\nimport {visualizeBFS} from '../Algorithms/Search/bfs';\r\nimport {getInitialGrid, resetGrid, clearPath, createNode, randomInteger} from '../Algorithms/helpers';\r\nimport './AlgoVisualizer.css';  \r\nimport { visualizeRecursiveDivision } from '../Algorithms/Generator/recursiveDivision';\r\n\r\nexport default class AlgoVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startNodeCoords: [5, 10],\r\n            finishNodeCoords: [7, 40],\r\n            mouseIsPressed: false,\r\n            running: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = getInitialGrid(this);\r\n        this.setState({grid});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.running){\r\n            const newGrid = getWallUpdatedGrid(this.state.grid, row, col);\r\n            this.setState({ grid: newGrid, mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        if(!this.state.running){\r\n            const newGrid = getWallUpdatedGrid(this.state.grid, row, col);\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n    \r\n    handleMouseUp() {\r\n        this.setState({ mouseIsPressed: false });\r\n    }\r\n\r\n    randomizeStartFinishNodes() {\r\n        var {grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        \r\n        grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"default\", Infinity);\r\n        grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"default\", Infinity);\r\n        \r\n        var emptyNodes = [];\r\n        // Get all empty nodes\r\n        for(var row of grid){\r\n            var newRow = row.filter(node => node.type === \"default\");\r\n            if(newRow.length > 0) emptyNodes.push(newRow);\r\n        }\r\n\r\n        if(emptyNodes.length > 0) {\r\n            var startNodeRow = randomInteger(0, emptyNodes.length - 1);\r\n            var startNode = emptyNodes[startNodeRow][randomInteger(0, emptyNodes[startNodeRow].length - 1)];\r\n            var finishNodeRow = randomInteger(0, emptyNodes.length - 1);\r\n            var finishNode = emptyNodes[finishNodeRow][randomInteger(0, emptyNodes[finishNodeRow].length - 1)];\r\n    \r\n            startNodeCoords = [startNode.row, startNode.col];\r\n            finishNodeCoords = [finishNode.row, finishNode.col];\r\n            \r\n            grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"startNode\", 0);\r\n            grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"finishNode\", Infinity);\r\n            \r\n            this.setState({ grid, startNodeCoords, finishNodeCoords });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid, startNodeCoords, finishNodeCoords} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Pathfinding Visualizer</h1>\r\n                <div className='menu'>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDijkstra(this, grid, startNodeCoords, finishNodeCoords)}>Dijkstra's Algorithm</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeAStar(this, grid, startNodeCoords, finishNodeCoords)}>A*</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDFS(this, grid, startNodeCoords, finishNodeCoords)}>DFS</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeBFS(this, grid, startNodeCoords, finishNodeCoords)}>BFS</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeRecursiveDivision(this, grid, startNodeCoords, finishNodeCoords)}>Recursive Division</button>\r\n                </div>\r\n                <div className='menu'>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> resetGrid(this)}>Clear Walls</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> clearPath(this)}>Clear Path</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> clearPath(this, this.randomizeStartFinishNodes)}>Randomize Start and End Nodes</button>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, type, distance } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            className='node'\r\n                                            row={row}\r\n                                            col={col}\r\n                                            type={type}\r\n                                            distance={distance}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        >\r\n                                        </Node>);\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getWallUpdatedGrid(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        type: node.type === \"wallNode\" ? \"default\" : node.type === \"default\" ? \"wallNode\" : node.type\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport AlgoVisuaizer from './AlgoVisualizer/AlgoVisualizer';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AlgoVisuaizer></AlgoVisuaizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}