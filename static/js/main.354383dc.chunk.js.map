{"version":3,"sources":["AlgoVisualizer/Node/Node.jsx","Algorithms/helpers.js","Algorithms/Search/dijkstra.js","Algorithms/Search/aStar.js","Algorithms/Search/dfs.js","Algorithms/Search/bfs.js","Algorithms/Generator/recursiveDivision.js","AlgoVisualizer/AlgoVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","type","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","typeClass","id","className","Component","animateAlgorithm","algoVisualizer","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","node","document","getElementById","setState","running","animateShortestPath","oldClasses","getAllNodes","grid","nodes","push","getUnvisitedNeighbors","neighbors","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","currentNode","unshift","previousNode","clearPath","callback","distance","Infinity","createNode","isPathDrawn","heuristic","randomInteger","min","max","Math","floor","random","resetGrid","startNodeCoords","finishNodeCoords","getInitialGrid","currentRow","startRow","startCol","finishRow","finishCol","getEuclideanDistance","x1","y1","x2","y2","a","b","sqrt","getRandomEmptyNodeCoords","emptyNodes","newRow","nodeRow","updateUnvisitedNeighbors","unvisitedNeighbors","visualizeDijkstra","startNode","visitedNodes","unvisitedNodes","sort","nodeA","nodeB","closestNode","shift","computeDijkstra","computeAStar","abs","getGridWithHeuristics","updateneighbors","getNeighbors","visualizeDFS","computeDFS","unvisitedNeighbor","newVisitedNodes","visualizeBFS","queue","path","includes","computeBFS","visualizeRecursiveDivision","generatedWallsInOrder","computeRecursiveDivision","chamber","slice","wallLineRow","entranceIdx","newTopChamber","newBottomChamber","currentRowTopChamber","currentRowBottomChamber","wallLineCol","newLeftChamber","newRightChamber","currentRowLeftChamber","currentRowRightChamber","delay","animateGeneration","setWalls","walls","newNode","AlgoVisualizer","dragging","newGrid","getWallUpdatedGrid","enteredNodeType","randomEmptyNodeCoords","getNodeUpdatedGrid","startNodeRow","finishNodeRow","disabled","onClick","visualizeAStar","randomizeStartFinishNodes","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.354383dc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            type,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            onMouseLeave\r\n        } = this.props;\r\n\r\n        const typeClass = type === \"finishNode\"\r\n            ? 'node-finish'\r\n            : type === \"startNode\"\r\n            ? 'node-start'\r\n            : type === \"wallNode\"\r\n            ? 'node-wall'\r\n            : '';\r\n\r\n        return (\r\n            <div \r\n                id={`node-${row}-${col}`}\r\n                className = {`node ${typeClass}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseLeave={() => onMouseLeave(row, col)}\r\n                onMouseUp={() => onMouseUp(row, col)}><div className='node-center'></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","export function animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    const delay = 10;\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n        if (i === visitedNodesInOrder.length) {\r\n            // Animate the shortest path\r\n            setTimeout(() => {\r\n                animateShortestPath(algoVisualizer, nodesInShortestPathOrder);\r\n            }, delay * i);\r\n            return;\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            var oldClasses = document.getElementById(`node-${node.row}-${node.col}`).className\r\n            // Animate the current node\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-current';\r\n            // Animate the visted nodes\r\n            setTimeout(()=>{\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-visited';\r\n            }, delay);\r\n        }, delay * i);\r\n    }\r\n}\r\n\r\nfunction animateShortestPath(algoVisualizer, nodesInShortestPathOrder) {\r\n    const delay = 25;\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        setTimeout(() => {\r\n            const node = nodesInShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = \r\n            document.getElementById(`node-${node.row}-${node.col}`).className + ' node-shortest-path';\r\n        }, delay * i);\r\n    }\r\n    setTimeout(()=>{algoVisualizer.setState({running: false});}, delay * nodesInShortestPathOrder.length);\r\n}\r\n\r\nexport function animateGeneration(algoVisualizer, generatedWallsInOrder, callback=null) {\r\n    const { grid } = algoVisualizer.state;\r\n    const delay = 10;\r\n    for (let i = 0; i < generatedWallsInOrder.length; i++) {\r\n        setTimeout(() => {\r\n            const node = generatedWallsInOrder[i];\r\n            var oldClasses = document.getElementById(`node-${node.row}-${node.col}`).className\r\n            // Animate the current node\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-current';\r\n            // Animate the visted nodes\r\n            setTimeout(()=>{\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-wall';\r\n            }, delay);\r\n        }, delay * i);\r\n    }\r\n    setTimeout(()=>{\r\n        algoVisualizer.setState({running: false});\r\n        if(callback) callback(algoVisualizer, grid, generatedWallsInOrder);\r\n    }, delay * generatedWallsInOrder.length);\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n\r\n    if(row > 0) neighbors.push(grid[row-1][col]);\r\n    if(row + 1 < grid.length) neighbors.push(grid[row + 1][col]);\r\n    if(col > 0) neighbors.push(grid[row][col-1]);\r\n    if(col + 1 < grid[0].length) neighbors.push(grid[row][col + 1]);\r\n\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n\r\n    if(row > 0) neighbors.push(grid[row-1][col]);\r\n    if(row + 1 < grid.length) neighbors.push(grid[row + 1][col]);\r\n    if(col > 0) neighbors.push(grid[row][col-1]);\r\n    if(col + 1 < grid[0].length) neighbors.push(grid[row][col + 1]);\r\n\r\n    return neighbors;\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    var currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\nexport function sortNodesByDistance(nodes) {\r\n    nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function sortNodesByDistanceAndHeuristic(nodes){\r\n    nodes.sort(function (nodeA, nodeB) {\r\n        // Sort on distance\r\n        if(nodeA.distance > nodeB.distance) {\r\n            return 1;\r\n        } else if (nodeA.distance < nodeB.distance) {\r\n            return -1;\r\n        } else {\r\n            // If the distances are the same,\r\n            // sort on distance - heuristic\r\n            if(nodeA.heuristic > nodeB.heuristic) {\r\n                return 1;\r\n            } else if (nodeA.heuristic < nodeB.heuristic) {\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function clearPath(algoVisualizer, callback=null) {\r\n    var {grid} = algoVisualizer.state;\r\n    \r\n    for(const row of grid) {\r\n        for(var node of row){\r\n            // update node values\r\n            var distance = node.type === \"startNode\" ? 0 : Infinity; \r\n            grid[node.row][node.col] = createNode(node.row, node.col, node.type, distance);\r\n            // update css class\r\n            if(node.type === \"default\"){\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n            }\r\n        }\r\n    }\r\n    algoVisualizer.setState({ grid, isPathDrawn: false }, callback);\r\n}\r\n\r\nexport function createNode(row, col, type, distance) {\r\n    return {\r\n        row,\r\n        col,\r\n        type,\r\n        distance,\r\n        heuristic: 0,\r\n        isVisited: false,\r\n        previousNode: null\r\n    }\r\n}\r\n\r\nexport function randomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function randomEvenInteger(min, max) {\r\n    var temp =(Math.floor(Math.random() * (Math.floor(max/2) - min + 1)) + min) * 2;\r\n    return temp;\r\n}\r\n\r\nexport function randomOddInteger(min, max) {\r\n    var temp = (Math.floor(Math.random() * (Math.floor(max/2) - min + 1)) + min) * 2 + 1;\r\n    return temp;\r\n}\r\n\r\nexport function resetGrid(algoVisualizer, callback) {\r\n    var {grid, startNodeCoords, finishNodeCoords} = algoVisualizer.state;\r\n\r\n    // reset node classnames\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n        }\r\n    }\r\n\r\n    // set start and finish node classnames\r\n    document.getElementById(`node-${startNodeCoords[0]}-${startNodeCoords[1]}`).className = 'node node-start';\r\n    document.getElementById(`node-${finishNodeCoords[0]}-${finishNodeCoords[1]}`).className = 'node node-finish';\r\n    grid = getInitialGrid(algoVisualizer);\r\n    algoVisualizer.setState({ grid }, callback);\r\n}\r\n\r\nexport function getInitialGrid(algoVisualizer){\r\n    // Generate the empty grid\r\n    const grid = [];\r\n    const nodesPerRow = 20;\r\n    const nodesPerCol = 50;\r\n    for (let row = 0; row < nodesPerRow; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < nodesPerCol; col++) {\r\n            currentRow.push(createNode(row, col, \"default\", Infinity));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    // Set the start and finish nodes\r\n    const [startRow, startCol] = algoVisualizer.state.startNodeCoords;\r\n    const [finishRow, finishCol] = algoVisualizer.state.finishNodeCoords;\r\n    grid[startRow][startCol] = createNode(startRow, startCol, \"startNode\", 0);\r\n    grid[finishRow][finishCol] = createNode(finishRow, finishCol, \"finishNode\", Infinity);\r\n    return grid;\r\n};\r\n\r\nexport function getEuclideanDistance(x1, y1, x2, y2){\r\n    var a = x1 - x2;\r\n    var b = y1 - y2;\r\n    return Math.sqrt( a*a + b*b );\r\n}\r\n\r\nexport function getRandomEmptyNodeCoords(algoVisualizer){\r\n    var {grid} = algoVisualizer.state;\r\n    var emptyNodes = [];\r\n    // Get all empty nodes\r\n    for(var row of grid){\r\n        var newRow = row.filter(node => node.type === \"default\");\r\n        if(newRow.length > 0) emptyNodes.push(newRow);\r\n    }\r\n\r\n    if(emptyNodes.length > 0) {\r\n        var nodeRow = randomInteger(0, emptyNodes.length - 1);\r\n        var node = emptyNodes[nodeRow][randomInteger(0, emptyNodes[nodeRow].length - 1)];\r\n        return [node.row, node.col];\r\n    }\r\n}","import { animateAlgorithm, sortNodesByDistance, getAllNodes, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nexport function computeDijkstra(grid, startNodeCoords, finishNodeCoords) {\r\n  const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n  const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n  startNode.distance = 0;\r\n  var visitedNodes = [];\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(unvisitedNodes.length){\r\n      // Sort the nodes by distance\r\n      sortNodesByDistance(unvisitedNodes);\r\n      // Get the closest unvisited node\r\n      var closestNode = unvisitedNodes.shift();\r\n      // unvisitedNodes.unshift();\r\n      // Skip if the closest node is a wall\r\n      if(closestNode.type === \"wallNode\") continue;\r\n      // Return if there are no possible routes\r\n      if (closestNode.distance === Infinity) return visitedNodes;\r\n      closestNode.isVisited = true;\r\n      visitedNodes.push(closestNode);\r\n\r\n      // Check if the current node is the finish node\r\n      if(closestNode === finishNode) return visitedNodes;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function visualizeDijkstra(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n  algoVisualizer.setState({running: true});\r\n  clearPath(algoVisualizer);\r\n  const visitedNodesInOrder = computeDijkstra(grid, startNodeCoords, finishNodeCoords);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n  animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n  algoVisualizer.setState({isPathDrawn: true});\r\n}\r\n\r\n\r\n","import { animateAlgorithm, sortNodesByDistanceAndHeuristic, getAllNodes, getNeighbors, getNodesInShortestPathOrder, clearPath, getEuclideanDistance } from '../helpers.js';\r\n\r\nexport function computeAStar(grid, startNodeCoords, finishNodeCoords) {\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    grid = getGridWithHeuristics(grid, finishNode, \"manhattan\");\r\n    startNode.distance = 0;\r\n    var visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while(unvisitedNodes.length){\r\n        // Sort the nodes by distance\r\n        sortNodesByDistanceAndHeuristic(unvisitedNodes);\r\n        // Get the closest unvisited node\r\n        var closestNode = unvisitedNodes.shift();\r\n        // Skip if the closest node is a wall\r\n        if(closestNode.type === \"wallNode\") continue;\r\n        // Return if there are no possible routes\r\n        if (closestNode.distance === Infinity) return visitedNodes;\r\n        closestNode.isVisited = true;\r\n        visitedNodes.push(closestNode);\r\n\r\n        // Check if the current node is the finish node\r\n        if(closestNode === finishNode) return visitedNodes;\r\n        updateneighbors(closestNode, grid);\r\n    }\r\n}\r\n\r\nexport function visualizeAStar(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true, isPathDrawn: true});\r\n    clearPath(algoVisualizer);\r\n    const visitedNodesInOrder = computeAStar(grid, startNodeCoords, finishNodeCoords);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n    algoVisualizer.setState({isPathDrawn: true});\r\n}\r\n\r\nfunction updateneighbors(node, grid) {\r\n    const neighbors = getNeighbors(node, grid);\r\n    const weight = 1;\r\n    for (const neighbor of neighbors) {\r\n        if(neighbor.isVisited){\r\n            if(neighbor.distance - neighbor.heuristic < node.previousNode.distance - node.previousNode.heuristic){\r\n                node.previousNode = neighbor;\r\n            }\r\n        } else {\r\n            if(node.distance === 0){\r\n                neighbor.distance = weight + neighbor.heuristic; \r\n            } else {\r\n                neighbor.distance = node.distance - node.heuristic + weight + neighbor.heuristic;\r\n            }\r\n            neighbor.previousNode = node;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getGridWithHeuristics(grid, finishNode, heuristic=\"manhattan\"){\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            if(heuristic === \"manhattan\"){\r\n                // Manhattan distance heuristic\r\n                node.heuristic = Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col);\r\n            } else if(heuristic === \"euclidean\") {\r\n                // Euclidean distance \r\n                node.heuristic = getEuclideanDistance(node.row, node.col, finishNode.row, finishNode.col);\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nfunction computeDFS(grid, currentNode, finishNode, visitedNodes) {\r\n    visitedNodes.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode === finishNode) return [visitedNodes, visitedNodes];\r\n    for(let unvisitedNeighbor of getUnvisitedNeighbors(currentNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")) {\r\n        if(!unvisitedNeighbor.isVisited){\r\n            unvisitedNeighbor.previousNode = currentNode;\r\n            var newVisitedNodes = computeDFS(grid, unvisitedNeighbor, finishNode, visitedNodes)[0];\r\n            if(newVisitedNodes) return [newVisitedNodes, newVisitedNodes];\r\n        }\r\n    }\r\n    return [null, visitedNodes];\r\n}\r\n\r\nexport function visualizeDFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeDFS(grid, startNode, finishNode, [])[1];\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    if(visitedNodesInOrder) animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder); else algoVisualizer.setState({running: false});\r\n    algoVisualizer.setState({isPathDrawn: true});\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from '../helpers.js';\r\n\r\nfunction computeBFS(grid, startNode, finishNode) {\r\n    var queue = [startNode];\r\n    var path = [startNode];\r\n    startNode.isVisited = true;\r\n\r\n    if(startNode === finishNode) return path;\r\n\r\n    while(queue){\r\n        startNode = queue.shift();\r\n\r\n        if(startNode){\r\n            for(var neighbor of getUnvisitedNeighbors(startNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")){\r\n                if(!path.includes(neighbor)){\r\n                    neighbor.previousNode = startNode;\r\n                    neighbor.isVisited = true;\r\n                    path.push(neighbor);\r\n                    queue.push(neighbor);\r\n    \r\n                    if(neighbor === finishNode) return path;\r\n                }\r\n            }\r\n        } else {\r\n            return path;\r\n        }\r\n\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function visualizeBFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true, isPathDrawn: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeBFS(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n    algoVisualizer.setState({isPathDrawn: true});\r\n}","import {resetGrid, randomInteger, animateGeneration} from '../helpers';\r\n\r\nexport function computeRecursiveDivision(chamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder){\r\n    \r\n    const min_chamber_size = 2;\r\n\r\n    // If minimum chamber size is reached, return the generated walls\r\n    if(chamber.length <= min_chamber_size && chamber[0].length <= min_chamber_size ){\r\n        return generatedWallsInOrder;\r\n    }\r\n\r\n    // Create the outer walls\r\n    if(generatedWallsInOrder.length === 0) {\r\n        for(var row = 0; row < chamber.length; row++){\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(row === 0 || col === 0 || row === chamber.length - 1 || col === chamber[0].length - 1 ){\r\n                    generatedWallsInOrder.push(chamber[row][col]);\r\n                }\r\n            }\r\n        }\r\n        chamber = chamber.slice(1, chamber.length - 1);\r\n        for(var row = 0; row < chamber.length; row++){\r\n            chamber[row] = chamber[row].slice(1, chamber[row].length - 1);\r\n        }\r\n    }\r\n\r\n    // Divide chamber horizonally if the chamber is more tall than wide\r\n    if(chamber.length > chamber[0].length){\r\n        // Select a random row within the chamber to draw walls. \r\n        // Leave a one row space to prevent a double wall\r\n        var wallLineRow = randomInteger(1, chamber.length - 2);\r\n        // Leave leave a space at one random location along the wall line\r\n        var entranceIdx = randomInteger(0, 1) === 0 ? 0 : chamber[0].length - 1;\r\n        // Add walls along that row\r\n        for(var col = 0; col < chamber[wallLineRow].length; col++){\r\n            if(col !== entranceIdx && chamber[wallLineRow][col] && chamber[wallLineRow][col].type !== \"startNode\" && chamber[wallLineRow][col].type !== \"finishNode\") generatedWallsInOrder.push(chamber[wallLineRow][col]);\r\n        }\r\n\r\n        // Recursively repeat on subchambers until minimum size of chamber is reached\r\n        // Get the two new chambers\r\n        var newTopChamber = [];\r\n        var newBottomChamber = [];\r\n        for(var row = 0; row < chamber.length; row++){\r\n            const currentRowTopChamber = [];\r\n            const currentRowBottomChamber = [];\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(row < wallLineRow) currentRowTopChamber.push(chamber[row][col]);\r\n                if(row > wallLineRow) currentRowBottomChamber.push(chamber[row][col]); \r\n            }\r\n            if(currentRowTopChamber.length !== 0) newTopChamber.push(currentRowTopChamber);\r\n            if(currentRowBottomChamber.length !== 0) newBottomChamber.push(currentRowBottomChamber);\r\n            \r\n        }\r\n\r\n        generatedWallsInOrder = computeRecursiveDivision(newTopChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n        generatedWallsInOrder = computeRecursiveDivision(newBottomChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n\r\n    } else {\r\n        // Select a random col within the chamber to draw walls. \r\n        // Leave a one col space to prevent a double wall\r\n        var wallLineCol = randomInteger(1, chamber[0].length - 2);\r\n        // Leave leave a space at one random location along the wall line\r\n        var entranceIdx = randomInteger(0, 1) === 0 ? 0 : chamber.length - 1;\r\n        // Add walls along that col\r\n        for(var row = 0; row < chamber.length; row++){\r\n            if(row !== entranceIdx && chamber[row][wallLineCol] && chamber[row][wallLineCol].type !== \"startNode\" && chamber[row][wallLineCol].type !== \"finishNode\") generatedWallsInOrder.push(chamber[row][wallLineCol]);\r\n        }\r\n\r\n        // Recursively repeat on subchambers until minimum size of chamber is reached\r\n        // Get the two new chambers\r\n        var newLeftChamber = [];\r\n        var newRightChamber = [];\r\n        for(var row = 0; row < chamber.length; row++){\r\n            const currentRowLeftChamber = [];\r\n            const currentRowRightChamber = [];\r\n            for(var col = 0; col < chamber[0].length; col++){\r\n                if(col < wallLineCol) currentRowLeftChamber.push(chamber[row][col]);\r\n                if(col > wallLineCol) currentRowRightChamber.push(chamber[row][col]);\r\n            }\r\n            newLeftChamber.push(currentRowLeftChamber);\r\n            newRightChamber.push(currentRowRightChamber);\r\n        }\r\n\r\n        generatedWallsInOrder = computeRecursiveDivision(newLeftChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n        generatedWallsInOrder = computeRecursiveDivision(newRightChamber, startNodeCoords, finishNodeCoords, generatedWallsInOrder);\r\n    }\r\n\r\n    return generatedWallsInOrder;\r\n}\r\n\r\nexport function visualizeRecursiveDivision(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    resetGrid(algoVisualizer, ()=>{\r\n        // Get the generated walls in order\r\n        const generatedWallsInOrder = computeRecursiveDivision(grid, startNodeCoords, finishNodeCoords, []);\r\n        animateGeneration(algoVisualizer, generatedWallsInOrder, setWalls);\r\n    });\r\n}\r\n\r\nfunction setWalls(algoVisualizer, grid, walls){\r\n    for(var node of walls){\r\n        const newNode = {\r\n            ...node,\r\n            type: \"wallNode\"\r\n            };\r\n        grid[node.row][node.col] = newNode;\r\n    }\r\n    algoVisualizer.setState({ grid });\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport {visualizeDijkstra} from '../Algorithms/Search/dijkstra';\r\nimport {visualizeAStar} from '../Algorithms/Search/aStar';\r\nimport {visualizeDFS} from '../Algorithms/Search/dfs';\r\nimport {visualizeBFS} from '../Algorithms/Search/bfs';\r\nimport {getInitialGrid, resetGrid, clearPath, createNode, randomInteger, getRandomEmptyNodeCoords} from '../Algorithms/helpers';\r\nimport './AlgoVisualizer.css';  \r\nimport { visualizeRecursiveDivision } from '../Algorithms/Generator/recursiveDivision';\r\n\r\nexport default class AlgoVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startNodeCoords: [5, 10],\r\n            finishNodeCoords: [7, 40],\r\n            running: false,\r\n            dragging: \"\",\r\n            isPathDrawn: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = getInitialGrid(this);\r\n        this.setState({grid});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        var type = this.state.grid[row][col].type;\r\n        if(!this.state.running){\r\n            if(type === \"startNode\") {\r\n                this.setState({ dragging: \"startNode\" });\r\n            } else if(type === \"finishNode\"){\r\n                this.setState({ dragging: \"finishNode\" });\r\n            } else {\r\n                const newGrid = getWallUpdatedGrid(this.state.grid, row, col);\r\n                this.setState({ grid: newGrid, dragging: \"wallNode\" });\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleMouseEnter(row, col) {\r\n        const enteredNodeType = this.state.grid[row][col].type;\r\n        var newGrid = this.state.grid;\r\n\r\n        if(!this.state.dragging === \"\") return;\r\n        if(!this.state.running){\r\n            if(this.state.dragging === \"startNode\"){\r\n                if(enteredNodeType === \"finishNode\"){\r\n                    const randomEmptyNodeCoords = getRandomEmptyNodeCoords(this);\r\n                    newGrid = getNodeUpdatedGrid(newGrid, randomEmptyNodeCoords[0], randomEmptyNodeCoords[1], \"finishNode\");\r\n                    this.setState({ finishNodeCoords: randomEmptyNodeCoords });\r\n                }\r\n                newGrid = getNodeUpdatedGrid(newGrid, row, col, \"startNode\");\r\n                this.setState({ grid: newGrid });\r\n            } else if(this.state.dragging === \"finishNode\") {\r\n                if(enteredNodeType === \"startNode\"){\r\n                    const randomEmptyNodeCoords = getRandomEmptyNodeCoords(this);\r\n                    newGrid = getNodeUpdatedGrid(newGrid, randomEmptyNodeCoords[0], randomEmptyNodeCoords[1], \"startNode\");\r\n                    this.setState({ startNodeCoords: randomEmptyNodeCoords });\r\n                }\r\n                newGrid = getNodeUpdatedGrid(newGrid, row, col, \"finishNode\");\r\n                this.setState({ grid: newGrid });\r\n\r\n            } else if(this.state.dragging === \"wallNode\") {\r\n                newGrid = getWallUpdatedGrid(newGrid, row, col);\r\n                this.setState({ grid: newGrid });\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleMouseLeave(row, col){\r\n        if(!this.state.running){\r\n            if(this.state.dragging === \"startNode\" || this.state.dragging === \"finishNode\"){\r\n                if(this.state.isPathDrawn){\r\n                    clearPath(this);\r\n                }\r\n                const newGrid = getNodeUpdatedGrid(this.state.grid, row, col, \"default\");\r\n                this.setState({ grid: newGrid });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseUp(row, col) {\r\n        if(!this.state.running){\r\n            if(this.state.dragging === \"startNode\"){\r\n                const newGrid = getNodeUpdatedGrid(this.state.grid, row, col, \"startNode\");\r\n                this.setState({ grid: newGrid, dragging: \"\", startNodeCoords: [row, col] });\r\n            } else if(this.state.dragging === \"finishNode\") {\r\n                const newGrid = getNodeUpdatedGrid(this.state.grid, row, col, \"finishNode\");\r\n                this.setState({ grid: newGrid, dragging: \"\", finishNodeCoords: [row, col] });\r\n                \r\n            }\r\n        }\r\n        this.setState({ dragging: \"\" });\r\n    }\r\n\r\n    randomizeStartFinishNodes() {\r\n        var {grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        \r\n        grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"default\", Infinity);\r\n        grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"default\", Infinity);\r\n        \r\n        var emptyNodes = [];\r\n        // Get all empty nodes\r\n        for(var row of grid){\r\n            var newRow = row.filter(node => node.type === \"default\");\r\n            if(newRow.length > 0) emptyNodes.push(newRow);\r\n        }\r\n\r\n        if(emptyNodes.length > 0) {\r\n            var startNodeRow = randomInteger(0, emptyNodes.length - 1);\r\n            var startNode = emptyNodes[startNodeRow][randomInteger(0, emptyNodes[startNodeRow].length - 1)];\r\n            var finishNodeRow = randomInteger(0, emptyNodes.length - 1);\r\n            var finishNode = emptyNodes[finishNodeRow][randomInteger(0, emptyNodes[finishNodeRow].length - 1)];\r\n    \r\n            startNodeCoords = [startNode.row, startNode.col];\r\n            finishNodeCoords = [finishNode.row, finishNode.col];\r\n            \r\n            grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"startNode\", 0);\r\n            grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"finishNode\", Infinity);\r\n            \r\n            this.setState({ grid, startNodeCoords, finishNodeCoords });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid, startNodeCoords, finishNodeCoords} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className='menu'>\r\n                    <h1 className='title'>Pathfinding Visualizer</h1>\r\n                    <div className='menu-group-container'>\r\n                        <div className='menu-group'>\r\n                            <h2>Pathfinding</h2>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDijkstra(this, grid, startNodeCoords, finishNodeCoords)}>Dijkstra's Algorithm</button>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeAStar(this, grid, startNodeCoords, finishNodeCoords)}>A*</button>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDFS(this, grid, startNodeCoords, finishNodeCoords)}>DFS</button>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeBFS(this, grid, startNodeCoords, finishNodeCoords)}>BFS</button>\r\n                        </div>\r\n                        <div className='menu-group'>\r\n                            <h2>Generators</h2>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeRecursiveDivision(this, grid, startNodeCoords, finishNodeCoords)}>Recursive Division</button>\r\n                        </div>\r\n                        <div className='menu-group'>\r\n                            <h2>Board Options</h2>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> resetGrid(this)}>Clear Walls</button>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> clearPath(this)}>Clear Path</button>\r\n                            <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> clearPath(this, this.randomizeStartFinishNodes)}>Randomize Start and End Nodes</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, type, distance } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            className='node'\r\n                                            row={row}\r\n                                            col={col}\r\n                                            type={type}\r\n                                            distance={distance}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                                            onMouseLeave={(row, col) => this.handleMouseLeave(row, col)}\r\n                                        >\r\n                                        </Node>);\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getWallUpdatedGrid(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        type: node.type === \"wallNode\" ? \"default\" : node.type === \"default\" ? \"wallNode\" : node.type\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}\r\n\r\nfunction getNodeUpdatedGrid(grid, row, col, type) {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        type\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport AlgoVisuaizer from './AlgoVisualizer/AlgoVisualizer';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AlgoVisuaizer></AlgoVisuaizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}