{"version":3,"sources":["AlgoVisualizer/Node/Node.jsx","Algorithms/helpers.js","Algorithms/dijkstra.js","Algorithms/aStar.js","Algorithms/dfs.js","Algorithms/bfs.js","AlgoVisualizer/AlgoVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","type","onMouseDown","onMouseEnter","onMouseUp","typeClass","id","className","Component","animateAlgorithm","algoVisualizer","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","node","document","getElementById","setState","running","animateShortestPath","oldClasses","getAllNodes","grid","nodes","push","getUnvisitedNeighbors","neighbors","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","currentNode","unshift","previousNode","sortNodesByDistance","sort","nodeA","nodeB","distance","clearPath","Infinity","createNode","updateUnvisitedNeighbors","unvisitedNeighbors","visualizeDijkstra","startNodeCoords","finishNodeCoords","startNode","visitedNodes","unvisitedNodes","closestNode","shift","computeDijkstra","visualizeAStar","computeAStar","manhattanDistance","Math","abs","visualizeDFS","computeDFS","unvisitedNeighbor","newVisitedNodes","visualizeBFS","queue","path","includes","computeBFS","AlgoVisualizer","mouseIsPressed","getInitialGrid","newGrid","getWallUpdatedGrid","callback","randomInteger","disabled","onClick","resetGrid","randomizeStartFinishNodes","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","startRow","startCol","finishRow","finishCol","slice","newNode","min","max","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4b195e5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row,\r\n            col,\r\n            type,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp\r\n        } = this.props;\r\n\r\n        const typeClass = type === \"finishNode\"\r\n            ? 'node-finish'\r\n            : type === \"startNode\"\r\n            ? 'node-start'\r\n            : type === \"wallNode\"\r\n            ? 'node-wall'\r\n            : '';\r\n\r\n        return (\r\n            <div \r\n                id={`node-${row}-${col}`}\r\n                className = {`node ${typeClass}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","export function animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder) {\r\n  for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n          setTimeout(() => {\r\n              animateShortestPath(algoVisualizer, nodesInShortestPathOrder);\r\n          }, 10 * i);\r\n          return;\r\n      }\r\n      \r\n      setTimeout(() => {\r\n          const node = visitedNodesInOrder[i];\r\n          var oldClasses = document.getElementById(`node-${node.row}-${node.col}`).className\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-current';\r\n          setTimeout(()=>{\r\n              document.getElementById(`node-${node.row}-${node.col}`).className = oldClasses + ' node-visited';\r\n          }, 10);\r\n      }, 10 * i);\r\n  }\r\n}\r\n\r\nfunction animateShortestPath(algoVisualizer, nodesInShortestPathOrder) {\r\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className = \r\n          document.getElementById(`node-${node.row}-${node.col}`).className + ' node-shortest-path';\r\n      }, 50 * i);\r\n  }\r\n  setTimeout(()=>{algoVisualizer.setState({running: false});}, 50 * nodesInShortestPathOrder.length);\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n\r\n    if(row > 0) neighbors.push(grid[row-1][col]);\r\n    if(row + 1 < grid.length) neighbors.push(grid[row + 1][col]);\r\n    if(col > 0) neighbors.push(grid[row][col-1]);\r\n    if(col + 1 < grid[0].length) neighbors.push(grid[row][col + 1]);\r\n\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  var currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nexport function sortNodesByDistance(nodes) {\r\n    nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function clearPath(algoVisualizer) {\r\n        var {grid} = algoVisualizer.state;\r\n        \r\n        for(const row of grid) {\r\n            for(var node of row){\r\n                // update node values\r\n                var distance = node.type === \"startNode\" ? 0 : Infinity; \r\n                grid[node.row][node.col] = createNode(node.row, node.col, node.type, distance);\r\n                // update css class\r\n                if(node.type === \"default\"){\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n                }\r\n            }\r\n        }\r\n        algoVisualizer.setState({ grid });\r\n    }\r\n\r\nexport function createNode(row, col, type, distance) {\r\n    return {\r\n        row,\r\n        col,\r\n        type,\r\n        distance,\r\n        isVisited: false,\r\n        previousNode: null\r\n    }\r\n}","import { animateAlgorithm, sortNodesByDistance, getAllNodes, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from './helpers.js';\r\n\r\nexport function computeDijkstra(grid, startNodeCoords, finishNodeCoords) {\r\n  const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n  const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n  startNode.distance = 0;\r\n  var visitedNodes = [];\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while(unvisitedNodes.length){\r\n      // Sort the nodes by distance\r\n      sortNodesByDistance(unvisitedNodes);\r\n      // Get the closest unvisited node\r\n      var closestNode = unvisitedNodes.shift();\r\n      // unvisitedNodes.unshift();\r\n      // Skip if the closest node is a wall\r\n      if(closestNode.type === \"wallNode\") continue;\r\n      // Return if there are no possible routes\r\n      if (closestNode.distance === Infinity) return visitedNodes;\r\n      closestNode.isVisited = true;\r\n      visitedNodes.push(closestNode);\r\n\r\n      // Check if the current node is the finish node\r\n      if(closestNode === finishNode) return visitedNodes;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function visualizeDijkstra(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n  algoVisualizer.setState({running: true});\r\n  clearPath(algoVisualizer);\r\n  const visitedNodesInOrder = computeDijkstra(grid, startNodeCoords, finishNodeCoords);\r\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n  animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}\r\n\r\n\r\n","import { animateAlgorithm, sortNodesByDistance, getAllNodes, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from './helpers.js';\r\n\r\nexport function computeAStar(grid, startNodeCoords, finishNodeCoords) {\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    startNode.distance = 0;\r\n    var visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    while(unvisitedNodes.length){\r\n        // Sort the nodes by distance\r\n        sortNodesByDistance(unvisitedNodes);\r\n        // Get the closest unvisited node\r\n        var closestNode = unvisitedNodes.shift();\r\n        // unvisitedNodes.unshift();\r\n        // Skip if the closest node is a wall\r\n        if(closestNode.type === \"wallNode\") continue;\r\n        // Return if there are no possible routes\r\n        if (closestNode.distance === Infinity) return visitedNodes;\r\n        closestNode.isVisited = true;\r\n        visitedNodes.push(closestNode);\r\n\r\n        // Check if the current node is the finish node\r\n        if(closestNode === finishNode) return visitedNodes;\r\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n    }\r\n}\r\n\r\nexport function visualizeAStar(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const visitedNodesInOrder = computeAStar(grid, startNodeCoords, finishNodeCoords);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n        // Manhattan distance heuristic\r\n        var manhattanDistance = Math.abs(neighbor.row - finishNode.row) + Math.abs(neighbor.col - finishNode.col);\r\n        neighbor.distance = manhattanDistance;\r\n        neighbor.previousNode = node;\r\n    }\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from './helpers.js';\r\n\r\nfunction computeDFS(grid, currentNode, finishNode, visitedNodes) {\r\n    visitedNodes.push(currentNode);\r\n    currentNode.isVisited = true;\r\n    if(currentNode === finishNode) return visitedNodes;\r\n    for(let unvisitedNeighbor of getUnvisitedNeighbors(currentNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")) {\r\n        if(!unvisitedNeighbor.isVisited){\r\n            unvisitedNeighbor.previousNode = currentNode;\r\n            var newVisitedNodes = computeDFS(grid, unvisitedNeighbor, finishNode, visitedNodes);\r\n            if(newVisitedNodes)return newVisitedNodes;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function visualizeDFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeDFS(grid, startNode, finishNode, []);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}","import { animateAlgorithm, getUnvisitedNeighbors, getNodesInShortestPathOrder, clearPath } from './helpers.js';\r\n\r\nfunction computeBFS(grid, startNode, finishNode) {\r\n    var queue = [startNode];\r\n    var path = [startNode];\r\n    startNode.isVisited = true;\r\n\r\n    if(startNode === finishNode) return path;\r\n\r\n    while(queue){\r\n        startNode = queue.shift();\r\n\r\n        for(var neighbor of getUnvisitedNeighbors(startNode, grid).filter(neighbor => neighbor.type !== \"wallNode\")){\r\n            if(!path.includes(neighbor)){\r\n                neighbor.previousNode = startNode;\r\n                neighbor.isVisited = true;\r\n                path.push(neighbor);\r\n                queue.push(neighbor);\r\n\r\n                if(neighbor === finishNode) return path;\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function visualizeBFS(algoVisualizer, grid, startNodeCoords, finishNodeCoords) {\r\n    algoVisualizer.setState({running: true});\r\n    clearPath(algoVisualizer);\r\n    const startNode = grid[startNodeCoords[0]][startNodeCoords[1]];\r\n    const finishNode = grid[finishNodeCoords[0]][finishNodeCoords[1]];\r\n    const visitedNodesInOrder = computeBFS(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(grid[finishNodeCoords[0]][finishNodeCoords[1]]);\r\n    animateAlgorithm(algoVisualizer, visitedNodesInOrder, nodesInShortestPathOrder);\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport {visualizeDijkstra} from '../Algorithms/dijkstra';\r\nimport {visualizeAStar} from '../Algorithms/aStar';\r\nimport {visualizeDFS} from '../Algorithms/dfs';\r\nimport {visualizeBFS} from '../Algorithms/bfs';\r\nimport {clearPath, createNode} from '../Algorithms/helpers';\r\nimport './AlgoVisualizer.css';  \r\n\r\nexport default class AlgoVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startNodeCoords: [5, 10],\r\n            finishNodeCoords: [7, 40],\r\n            mouseIsPressed: false,\r\n            running: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const grid = getInitialGrid(this.state);\r\n        this.setState({grid});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.running){\r\n            const newGrid = getWallUpdatedGrid(this.state.grid, row, col);\r\n            this.setState({ grid: newGrid, mouseIsPressed: true });\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        if(!this.state.running){\r\n            const newGrid = getWallUpdatedGrid(this.state.grid, row, col);\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n    \r\n    handleMouseUp() {\r\n        this.setState({ mouseIsPressed: false });\r\n    }\r\n    \r\n    resetGrid(callback) {\r\n        var {grid, startNodeCoords, finishNodeCoords} = this.state;\r\n\r\n        // reset node classnames\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n            }\r\n        }\r\n\r\n        // set start and finish node classnames\r\n        document.getElementById(`node-${startNodeCoords[0]}-${startNodeCoords[1]}`).className = 'node node-start';\r\n        document.getElementById(`node-${finishNodeCoords[0]}-${finishNodeCoords[1]}`).className = 'node node-finish';\r\n        grid = getInitialGrid(this.state);\r\n        this.setState({ grid }, callback);\r\n    }\r\n\r\n    randomizeStartFinishNodes() {\r\n        var {grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        \r\n        grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"default\", Infinity);\r\n        grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"default\", Infinity);\r\n        \r\n        startNodeCoords = [randomInteger(0, grid.length - 1), randomInteger(0, grid[0].length - 1)];\r\n        finishNodeCoords = [randomInteger(0, grid.length - 1), randomInteger(0, grid[0].length - 1)];\r\n        \r\n        grid[startNodeCoords[0]][startNodeCoords[1]] = createNode(startNodeCoords[0], startNodeCoords[1], \"startNode\", 0);\r\n        grid[finishNodeCoords[0]][finishNodeCoords[1]] = createNode(finishNodeCoords[0], finishNodeCoords[1], \"finishNode\", Infinity);\r\n        \r\n        this.setState({ grid, startNodeCoords, finishNodeCoords });\r\n    }\r\n\r\n    render() {\r\n        const {grid, startNodeCoords, finishNodeCoords} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Pathfinding Visualizer</h1>\r\n                <div className='menu'>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDijkstra(this, grid, startNodeCoords, finishNodeCoords)}>Dijkstra's Algorithm</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeAStar(this, grid, startNodeCoords, finishNodeCoords)}>A*</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeDFS(this, grid, startNodeCoords, finishNodeCoords)}>DFS</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={() => visualizeBFS(this, grid, startNodeCoords, finishNodeCoords)}>BFS</button>\r\n                </div>\r\n                <div className='menu'>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> this.resetGrid()}>Reset</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> clearPath(this)}>Clear Path</button>\r\n                    <button className=\"btn btn-outline-dark\" disabled={this.state.running} onClick={()=> this.resetGrid(this.randomizeStartFinishNodes)}>Randomize Start and End Nodes</button>\r\n                </div>\r\n\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, type, distance } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            className='node'\r\n                                            row={row}\r\n                                            col={col}\r\n                                            type={type}\r\n                                            distance={distance}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) =>\r\n                                                this.handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        >\r\n                                        </Node>);\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst getInitialGrid = (state) => {\r\n    // Generate the empty grid\r\n    const grid = [];\r\n    const nodesPerRow = 20;\r\n    const nodesPerCol = 50;\r\n    for (let row = 0; row < nodesPerRow; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < nodesPerCol; col++) {\r\n            currentRow.push(createNode(row, col, \"default\", Infinity));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n\r\n    // Set the start and finish nodes\r\n    const [startRow, startCol] = state.startNodeCoords;\r\n    const [finishRow, finishCol] = state.finishNodeCoords;\r\n    grid[startRow][startCol] = createNode(startRow, startCol, \"startNode\", 0);\r\n    grid[finishRow][finishCol] = createNode(finishRow, finishCol, \"finishNode\", Infinity);\r\n    return grid;\r\n};\r\n\r\nfunction getWallUpdatedGrid(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        type: node.type === \"wallNode\" ? \"default\" : node.type === \"default\" ? \"wallNode\" : node.type\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}\r\n\r\nfunction randomInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport AlgoVisuaizer from './AlgoVisualizer/AlgoVisualizer';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AlgoVisuaizer></AlgoVisuaizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}